<?php

if (!defined('ABSPATH')) {
    exit;
}

class WC_Barcode_Labels_Barcode_Generator {
    
    private $code128_patterns = array(
        ' ' => '11011001100', '!' => '11001101100', '"' => '11001100110', '#' => '10010011000',
        '$' => '10010001100', '%' => '10001001100', '&' => '10011001000', "'" => '10011000100',
        '(' => '10001100100', ')' => '11001001000', '*' => '11001000100', '+' => '11000100100',
        ',' => '10110011100', '-' => '10011011100', '.' => '10011001110', '/' => '10111001100',
        '0' => '10011101100', '1' => '10011100110', '2' => '11001110010', '3' => '11001011100',
        '4' => '11001001110', '5' => '11011100100', '6' => '11001110100', '7' => '11101101110',
        '8' => '11101001100', '9' => '11100101100', ':' => '11100100110', ';' => '11101100100',
        '<' => '11100110100', '=' => '11100110010', '>' => '11011011000', '?' => '11011000110',
        '@' => '11000110110', 'A' => '10100011000', 'B' => '10001011000', 'C' => '10001000110',
        'D' => '10110001000', 'E' => '10001101000', 'F' => '10001100010', 'G' => '11010001000',
        'H' => '11000101000', 'I' => '11000100010', 'J' => '10110111000', 'K' => '10110001110',
        'L' => '10001101110', 'M' => '10111011000', 'N' => '10111000110', 'O' => '10001110110',
        'P' => '11101110110', 'Q' => '11010001110', 'R' => '11000101110', 'S' => '11011101000',
        'T' => '11011100010', 'U' => '11011101110', 'V' => '11101011000', 'W' => '11101000110',
        'X' => '11100010110', 'Y' => '11101101000', 'Z' => '11101100010', '[' => '11100011010',
        '\\' => '11101111010', ']' => '11001000010', '^' => '11110001010', '_' => '10100110000',
        '`' => '10100001100', 'a' => '10010110000', 'b' => '10010000110', 'c' => '10000101100',
        'd' => '10000100110', 'e' => '10110010000', 'f' => '10110000100', 'g' => '10011010000',
        'h' => '10011000010', 'i' => '10000110100', 'j' => '10000110010', 'k' => '11000010010',
        'l' => '11001010000', 'm' => '11110111010', 'n' => '11000010100', 'o' => '10001111010',
        'p' => '10100111100', 'q' => '10010111100', 'r' => '10010011110', 's' => '10111100100',
        't' => '10011110100', 'u' => '10011110010', 'v' => '11110100100', 'w' => '11110010100',
        'x' => '11110010010', 'y' => '11011011110', 'z' => '11011110110', '{' => '11110110110',
        '|' => '10101111000', '}' => '10100011110', '~' => '10001011110'
    );
    
    private $code128_values;
    
    public function __construct() {
        $this->code128_values = array_flip($this->code128_patterns);
        
        for ($i = 0; $i <= 99; $i++) {
            $pattern = $this->get_code128_pattern($i);
            $this->code128_patterns[chr($i)] = $pattern;
        }
    }
    
    public function generate_code128($data, $width = 300, $height = 50) {
        $barcode = $this->encode_code128($data);
        return $this->render_barcode($barcode, $width, $height);
    }
    
    private function encode_code128($data) {
        $encoded = '';
        
        $encoded .= '11010010000';
        
        $checksum = 104;
        for ($i = 0; $i < strlen($data); $i++) {
            $char = $data[$i];
            $value = ord($char);
            
            if ($value >= 32 && $value <= 126) {
                $encoded .= $this->get_code128_pattern($value - 32);
                $checksum += ($value - 32) * ($i + 1);
            }
        }
        
        $checksum = $checksum % 103;
        $encoded .= $this->get_code128_pattern($checksum);
        
        $encoded .= '1100011101011';
        
        return $encoded;
    }
    
    private function get_code128_pattern($value) {
        $patterns = array(
            '11011001100', '11001101100', '11001100110', '10010011000', '10010001100',
            '10001001100', '10011001000', '10011000100', '10001100100', '11001001000',
            '11001000100', '11000100100', '10110011100', '10011011100', '10011001110',
            '10111001100', '10011101100', '10011100110', '11001110010', '11001011100',
            '11001001110', '11011100100', '11001110100', '11101101110', '11101001100',
            '11100101100', '11100100110', '11101100100', '11100110100', '11100110010',
            '11011011000', '11011000110', '11000110110', '10100011000', '10001011000',
            '10001000110', '10110001000', '10001101000', '10001100010', '11010001000',
            '11000101000', '11000100010', '10110111000', '10110001110', '10001101110',
            '10111011000', '10111000110', '10001110110', '11101110110', '11010001110',
            '11000101110', '11011101000', '11011100010', '11011101110', '11101011000',
            '11101000110', '11100010110', '11101101000', '11101100010', '11100011010',
            '11101111010', '11001000010', '11110001010', '10100110000', '10100001100',
            '10010110000', '10010000110', '10000101100', '10000100110', '10110010000',
            '10110000100', '10011010000', '10011000010', '10000110100', '10000110010',
            '11000010010', '11001010000', '11110111010', '11000010100', '10001111010',
            '10100111100', '10010111100', '10010011110', '10111100100', '10011110100',
            '10011110010', '11110100100', '11110010100', '11110010010', '11011011110',
            '11011110110', '11110110110', '10101111000', '10100011110', '10001011110',
            '10111101000', '10111100010', '11110101000', '11110100010', '10111011110',
            '10111101110', '11101011110', '11110101110', '11010000100', '11010010000',
            '11010011100', '1100011101011'
        );
        
        return $patterns[$value] ?? '11011001100';
    }
    
    private function render_barcode($barcode, $width, $height) {
        $barcode_length = strlen($barcode);
        $bar_width = $width / $barcode_length;
        
        $image = imagecreate($width, $height);
        $white = imagecolorallocate($image, 255, 255, 255);
        $black = imagecolorallocate($image, 0, 0, 0);
        
        imagefill($image, 0, 0, $white);
        
        $x = 0;
        for ($i = 0; $i < $barcode_length; $i++) {
            if ($barcode[$i] == '1') {
                imagefilledrectangle($image, 
                    (int)($x), 0, 
                    (int)($x + $bar_width), $height - 1, 
                    $black
                );
            }
            $x += $bar_width;
        }
        
        return $image;
    }
    
    public function generate_ean13($data, $width = 300, $height = 50) {
        if (strlen($data) != 12 && strlen($data) != 13) {
            return false;
        }
        
        if (strlen($data) == 12) {
            $data .= $this->calculate_ean13_checksum($data);
        }
        
        $barcode = $this->encode_ean13($data);
        return $this->render_barcode($barcode, $width, $height);
    }
    
    private function encode_ean13($data) {
        $left_odd = array(
            '0001101', '0011001', '0010011', '0111101', '0100011',
            '0110001', '0101111', '0111011', '0110111', '0001011'
        );
        
        $left_even = array(
            '0100111', '0110011', '0011011', '0100001', '0011101',
            '0111001', '0000101', '0010001', '0001001', '0010111'
        );
        
        $right = array(
            '1110010', '1100110', '1101100', '1000010', '1011100',
            '1001110', '1010000', '1000100', '1001000', '1110100'
        );
        
        $patterns = array(
            array(0,0,0,0,0,0), array(0,0,1,0,1,1), array(0,0,1,1,0,1), array(0,0,1,1,1,0),
            array(0,1,0,0,1,1), array(0,1,1,0,0,1), array(0,1,1,1,0,0), array(0,1,0,1,0,1),
            array(0,1,0,1,1,0), array(0,1,1,0,1,0)
        );
        
        $first_digit = intval($data[0]);
        $pattern = $patterns[$first_digit];
        
        $encoded = '101';
        
        for ($i = 1; $i <= 6; $i++) {
            $digit = intval($data[$i]);
            if ($pattern[$i-1] == 0) {
                $encoded .= $left_odd[$digit];
            } else {
                $encoded .= $left_even[$digit];
            }
        }
        
        $encoded .= '01010';
        
        for ($i = 7; $i <= 12; $i++) {
            $digit = intval($data[$i]);
            $encoded .= $right[$digit];
        }
        
        $encoded .= '101';
        
        return $encoded;
    }
    
    private function calculate_ean13_checksum($data) {
        $sum = 0;
        for ($i = 0; $i < 12; $i++) {
            $digit = intval($data[$i]);
            if ($i % 2 == 0) {
                $sum += $digit;
            } else {
                $sum += $digit * 3;
            }
        }
        return (10 - ($sum % 10)) % 10;
    }
}